{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMLCAjoOBShOxn3KBp/3QWh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tharunakula/TensorFlow-Exercises/blob/main/Tensor%20Reshaping%20%26%20Operations\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XQ-Ro4qewlRu",
        "outputId": "e1d5e5a0-09f9-4f61-f654-e0929c7b349d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Tensor:\n",
            "tf.Tensor(\n",
            "[[ 0.40333515  0.03700652  1.6235018   1.6083359   0.755339    0.16247904]\n",
            " [-1.773847    1.584333    0.18651524  0.80667037 -0.22754744 -0.32487717]\n",
            " [ 0.8514013   0.7246881  -1.4964707   0.0348051  -0.79586643  0.00396656]\n",
            " [ 0.25746346 -1.1452974  -0.60492057 -0.563412    0.19021092 -2.0262673 ]], shape=(4, 6), dtype=float32)\n",
            "Rank before reshaping: 2\n",
            "Shape before reshaping: [4 6]\n",
            "\n",
            "Reshaped Tensor:\n",
            "tf.Tensor(\n",
            "[[[ 0.40333515  0.03700652  1.6235018   1.6083359 ]\n",
            "  [ 0.755339    0.16247904 -1.773847    1.584333  ]\n",
            "  [ 0.18651524  0.80667037 -0.22754744 -0.32487717]]\n",
            "\n",
            " [[ 0.8514013   0.7246881  -1.4964707   0.0348051 ]\n",
            "  [-0.79586643  0.00396656  0.25746346 -1.1452974 ]\n",
            "  [-0.60492057 -0.563412    0.19021092 -2.0262673 ]]], shape=(2, 3, 4), dtype=float32)\n",
            "Rank after reshaping: 3\n",
            "Shape after reshaping: [2 3 4]\n",
            "\n",
            "Transposed Tensor:\n",
            "tf.Tensor(\n",
            "[[[ 0.40333515  0.03700652  1.6235018   1.6083359 ]\n",
            "  [ 0.8514013   0.7246881  -1.4964707   0.0348051 ]]\n",
            "\n",
            " [[ 0.755339    0.16247904 -1.773847    1.584333  ]\n",
            "  [-0.79586643  0.00396656  0.25746346 -1.1452974 ]]\n",
            "\n",
            " [[ 0.18651524  0.80667037 -0.22754744 -0.32487717]\n",
            "  [-0.60492057 -0.563412    0.19021092 -2.0262673 ]]], shape=(3, 2, 4), dtype=float32)\n",
            "Rank after transposing: 3\n",
            "Shape after transposing: [3 2 4]\n",
            "\n",
            "Result after broadcasting and addition:\n",
            "tf.Tensor(\n",
            "[[[-1.0318351  -2.5954566   0.01488531  0.39463997]\n",
            "  [-0.58376896 -1.9077752  -3.1050873  -1.1788908 ]]\n",
            "\n",
            " [[-0.67983127 -2.469984   -3.3824635   0.37063706]\n",
            "  [-2.2310367  -2.6284966  -1.351153   -2.3589933 ]]\n",
            "\n",
            " [[-1.2486551  -1.8257928  -1.8361639  -1.538573  ]\n",
            "  [-2.0400908  -3.1958752  -1.4184055  -3.239963  ]]], shape=(3, 2, 4), dtype=float32)\n",
            "\n",
            "Explanation of Broadcasting:\n",
            "\n",
            "Broadcasting in TensorFlow (and NumPy) allows arithmetic operations between tensors of different shapes,\n",
            "as long as certain compatibility rules are met.  It avoids explicit data replication, making operations\n",
            "more memory and computationally efficient.\n",
            "\n",
            "In this example, 'smaller_tensor' with shape (1, 4) is added to 'transposed_tensor' with shape (3, 2, 4).\n",
            "Broadcasting works as follows:\n",
            "\n",
            "1. **Dimension Alignment:** TensorFlow compares the shapes of the two tensors dimension by dimension, starting from the trailing dimensions (rightmost).\n",
            "\n",
            "2. **Compatibility Rules:** Two dimensions are compatible if:\n",
            "   a) They are equal, or\n",
            "   b) One of them is 1.\n",
            "\n",
            "3. **Expansion:**  If a dimension in one tensor is 1, TensorFlow \"stretches\" or \"copies\" that dimension to match the corresponding dimension in the other tensor.  This is the \"broadcasting\" part.\n",
            "\n",
            "In our case:\n",
            "- (3, 2, 4) and (1, 4)\n",
            "\n",
            "- The last dimension (4) matches.\n",
            "- The second to last dimension: 2 vs 1. The 1 is broadcasted to 2.\n",
            "- The first dimension: 3 vs nothing (implicitly 1). The 1 is broadcasted to 3.\n",
            "\n",
            "So, the (1,4) tensor is effectively \"expanded\" to (3, 2, 4) by replicating its rows and then the element-wise addition is performed.\n",
            "\n",
            "Broadcasting simplifies code and improves performance, but it's crucial to understand how it works to avoid unexpected results.  If shapes are not compatible for broadcasting, TensorFlow will raise an error.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# 1. Create a random tensor of shape (4, 6)\n",
        "tensor = tf.random.normal(shape=(4, 6))\n",
        "\n",
        "# 2. Find its rank and shape using TensorFlow functions.\n",
        "rank_before = tf.rank(tensor)\n",
        "shape_before = tf.shape(tensor)\n",
        "\n",
        "print(\"Original Tensor:\")\n",
        "print(tensor)\n",
        "print(\"Rank before reshaping:\", rank_before.numpy())\n",
        "print(\"Shape before reshaping:\", shape_before.numpy())\n",
        "\n",
        "# 3. Reshape it into (2, 3, 4) and transpose it to (3, 2, 4).\n",
        "reshaped_tensor = tf.reshape(tensor, (2, 3, 4))\n",
        "transposed_tensor = tf.transpose(reshaped_tensor, perm=[1, 0, 2])  # Note the permutation for transpose\n",
        "\n",
        "rank_after_reshape = tf.rank(reshaped_tensor)\n",
        "shape_after_reshape = tf.shape(reshaped_tensor)\n",
        "\n",
        "rank_after_transpose = tf.rank(transposed_tensor)\n",
        "shape_after_transpose = tf.shape(transposed_tensor)\n",
        "\n",
        "\n",
        "print(\"\\nReshaped Tensor:\")\n",
        "print(reshaped_tensor)\n",
        "print(\"Rank after reshaping:\", rank_after_reshape.numpy())\n",
        "print(\"Shape after reshaping:\", shape_after_reshape.numpy())\n",
        "\n",
        "print(\"\\nTransposed Tensor:\")\n",
        "print(transposed_tensor)\n",
        "print(\"Rank after transposing:\", rank_after_transpose.numpy())\n",
        "print(\"Shape after transposing:\", shape_after_transpose.numpy())\n",
        "\n",
        "\n",
        "\n",
        "# 4. Broadcast a smaller tensor (1, 4) to match the larger tensor and add them.\n",
        "smaller_tensor = tf.random.normal(shape=(1, 4))\n",
        "\n",
        "# Broadcasting happens implicitly during the addition.  No explicit broadcast needed.\n",
        "broadcasted_sum = transposed_tensor + smaller_tensor\n",
        "\n",
        "print(\"\\nResult after broadcasting and addition:\")\n",
        "print(broadcasted_sum)\n",
        "\n",
        "\n",
        "# 5. Explain how broadcasting works in TensorFlow.\n",
        "print(\"\\nExplanation of Broadcasting:\")\n",
        "print(\"\"\"\n",
        "Broadcasting in TensorFlow (and NumPy) allows arithmetic operations between tensors of different shapes,\n",
        "as long as certain compatibility rules are met.  It avoids explicit data replication, making operations\n",
        "more memory and computationally efficient.\n",
        "\n",
        "In this example, 'smaller_tensor' with shape (1, 4) is added to 'transposed_tensor' with shape (3, 2, 4).\n",
        "Broadcasting works as follows:\n",
        "\n",
        "1. **Dimension Alignment:** TensorFlow compares the shapes of the two tensors dimension by dimension, starting from the trailing dimensions (rightmost).\n",
        "\n",
        "2. **Compatibility Rules:** Two dimensions are compatible if:\n",
        "   a) They are equal, or\n",
        "   b) One of them is 1.\n",
        "\n",
        "3. **Expansion:**  If a dimension in one tensor is 1, TensorFlow \"stretches\" or \"copies\" that dimension to match the corresponding dimension in the other tensor.  This is the \"broadcasting\" part.\n",
        "\n",
        "In our case:\n",
        "- (3, 2, 4) and (1, 4)\n",
        "\n",
        "- The last dimension (4) matches.\n",
        "- The second to last dimension: 2 vs 1. The 1 is broadcasted to 2.\n",
        "- The first dimension: 3 vs nothing (implicitly 1). The 1 is broadcasted to 3.\n",
        "\n",
        "So, the (1,4) tensor is effectively \"expanded\" to (3, 2, 4) by replicating its rows and then the element-wise addition is performed.\n",
        "\n",
        "Broadcasting simplifies code and improves performance, but it's crucial to understand how it works to avoid unexpected results.  If shapes are not compatible for broadcasting, TensorFlow will raise an error.\n",
        "\"\"\")"
      ]
    }
  ]
}